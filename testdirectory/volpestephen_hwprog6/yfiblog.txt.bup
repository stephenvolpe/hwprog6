Main: Beginning execution
Main: logfile 'yfiblog.txt'


PASS ONE
    0                                           *23 567 9 123 56789 1
    1                                           *ll mmm a sss hhhhh * comment
    2    0  000000000000 1100 1100 1100 1100        LD    IDX       * load ACC with value at IDX
    3    1  000000000001 1100 1100 1100 1100        ADD   STO       * add loop value to initial address
    4    2  000000000010 1100 1100 1100 1100        STC   STO       * store that address at STO
    5                                           *
    6    3  000000000011 1100 1100 1100 1100 TOP    LD    BB1       * load ACC with value at BB1
    7    4  000000000100 1100 1100 1100 1100        STC   TMP       * store that value at TMP
    8    5  000000000101 1100 1100 1100 1100        LD    BB1       * reload ACC with value at BB1
    9    6  000000000110 1100 1100 1100 1100        ADD   AA1       * add in value at AA1
   10    7  000000000111 1100 1100 1100 1100        WRT             * write the new Fib number
   11    8  000000001000 1100 1100 1100 1100        STC * STO       * store ACC where STO is pointing to
   12    9  000000001001 1100 1100 1100 1100        LD  * STO       * load ACC from where STO is pointing to
   13   10  000000001010 1100 1100 1100 1100        STC   BB1       * store ACC where STO is pointing to
   14   11  000000001011 1100 1100 1100 1100        LD    TMP       * load the old BB1 from TMP
   15   12  000000001100 1100 1100 1100 1100        STC   AA1       * store ACC where STO is pointing to
   16                                           *
   17   13  000000001101 1100 1100 1100 1100        LD    IDX       * reload ACC with the counter
   18   14  000000001110 1100 1100 1100 1100        ADD   ONE       * increment counter
   19   15  000000001111 1100 1100 1100 1100        STC   IDX       * store this new address at STO
   20   16  000000010000 1100 1100 1100 1100        LD    STO       * load our pointer
   21   17  000000010001 1100 1100 1100 1100        ADD   ONE       * increment by one
   22   18  000000010010 1100 1100 1100 1100        STC   STO       * store it back
   23   19  000000010011 1100 1100 1100 1100        LD    IDX       * reload ACC with the counter
   24   20  000000010100 1100 1100 1100 1100        BAN   TOP       * loop until done
   25   21  000000010101 1100 1100 1100 1100        STP   ... .....
   26                                           *
   27   22  000000010110 1100 1100 1100 1100 ONE    HEX       +0001 * we need a constant 1
   28   23  000000010111 1100 1100 1100 1100 IDX    HEX       -0005 * loop index
   29   24  000000011000 1100 1100 1100 1100 AA1    HEX       +0008 * smaller of two values to add 
   30   25  000000011001 1100 1100 1100 1100 BB1    HEX       +000D * larger of two values to add
   31   26  000000011010 1100 1100 1100 1100 TMP    DS        +0001 * temp storage
   32   27  000000011011 1100 1100 1100 1100 STO    HEX       +0028 * address in SSS at which to store
   33   28  000000011100 1100 1100 1100 1100        ORG       +0028 * set PC location for SSS at +0020 
   34   40  000000101000 1100 1100 1100 1100 SSS    DS        +0010
   35   56  000000111000 1100 1100 1100 1100        END   ... .....

SYMBOL TABLE
    SYM LOC FLAGS
SYM AA1  24
SYM BB1  25
SYM IDX  23
SYM ONE  22
SYM SSS  40
SYM STO  27
SYM TMP  26
SYM TOP   3



PASS TWO
    0                                           *23 567 9 123 56789 1
    1                                           *ll mmm a sss hhhhh * comment
    2    0  000000000000 1010 0000 0001 0111        LD    IDX       * load ACC with value at IDX
    3    1  000000000001 1000 0000 0001 1011        ADD   STO       * add loop value to initial address
    4    2  000000000010 0100 0000 0001 1011        STC   STO       * store that address at STO
    5                                           *
    6    3  000000000011 1010 0000 0001 1001 TOP    LD    BB1       * load ACC with value at BB1
    7    4  000000000100 0100 0000 0001 1010        STC   TMP       * store that value at TMP
    8    5  000000000101 1010 0000 0001 1001        LD    BB1       * reload ACC with value at BB1
    9    6  000000000110 1000 0000 0001 1000        ADD   AA1       * add in value at AA1
   10    7  000000000111 1110 0000 0000 0011        WRT             * write the new Fib number
   11    8  000000001000 0101 0000 0001 1011        STC * STO       * store ACC where STO is pointing to
   12    9  000000001001 1011 0000 0001 1011        LD  * STO       * load ACC from where STO is pointing to
   13   10  000000001010 0100 0000 0001 1001        STC   BB1       * store ACC where STO is pointing to
   14   11  000000001011 1010 0000 0001 1010        LD    TMP       * load the old BB1 from TMP
   15   12  000000001100 0100 0000 0001 1000        STC   AA1       * store ACC where STO is pointing to
   16                                           *
   17   13  000000001101 1010 0000 0001 0111        LD    IDX       * reload ACC with the counter
   18   14  000000001110 1000 0000 0001 0110        ADD   ONE       * increment counter
   19   15  000000001111 0100 0000 0001 0111        STC   IDX       * store this new address at STO
   20   16  000000010000 1010 0000 0001 1011        LD    STO       * load our pointer
   21   17  000000010001 1000 0000 0001 0110        ADD   ONE       * increment by one
   22   18  000000010010 0100 0000 0001 1011        STC   STO       * store it back
   23   19  000000010011 1010 0000 0001 0111        LD    IDX       * reload ACC with the counter
   24   20  000000010100 0000 0000 0000 0011        BAN   TOP       * loop until done
   25   21  000000010101 1110 0000 0000 0010        STP   ... .....
   26                                           *
   27   22  000000010110 0000 0000 0000 0001 ONE    HEX       +0001 * we need a constant 1
   28   23  000000010111 1111 1111 1111 1011 IDX    HEX       -0005 * loop index
   29   24  000000011000 0000 0000 0000 1000 AA1    HEX       +0008 * smaller of two values to add 
   30   25  000000011001 0000 0000 0000 1101 BB1    HEX       +000D * larger of two values to add
   31   26  000000011010 1111 0000 0000 0000 TMP    DS        +0001 * temp storage
   32   27  000000011011 0000 0000 0010 1000 STO    HEX       +0028 * address in SSS at which to store
   33   28  000000011100 1100 1100 1100 1100        ORG       +0028 * set PC location for SSS at +0020 
   34   40  000000101000 1111 0000 0000 0000 SSS    DS        +0010
   35   56  000000111000 0000 0000 1111 0000        END   ... .....

SYMBOL TABLE
    SYM LOC FLAGS
SYM AA1  24
SYM BB1  25
SYM IDX  23
SYM ONE  22
SYM SSS  40
SYM STO  27
SYM TMP  26
SYM TOP   3



MACHINE CODE
enter PrintMachineCode adotoutfib.bin
   0 000000000000 1010 0000 0001 0111
   1 000000000001 1000 0000 0001 1011
   2 000000000010 0100 0000 0001 1011
   3 000000000011 1010 0000 0001 1001
   4 000000000100 0100 0000 0001 1010
   5 000000000101 1010 0000 0001 1001
   6 000000000110 1000 0000 0001 1000
   7 000000000111 1110 0000 0000 0011
   8 000000001000 0101 0000 0001 1011
   9 000000001001 1011 0000 0001 1011
  10 000000001010 0100 0000 0001 1001
  11 000000001011 1010 0000 0001 1010
  12 000000001100 0100 0000 0001 1000
  13 000000001101 1010 0000 0001 0111
  14 000000001110 1000 0000 0001 0110
  15 000000001111 0100 0000 0001 0111
  16 000000010000 1010 0000 0001 1011
  17 000000010001 1000 0000 0001 0110
  18 000000010010 0100 0000 0001 1011
  19 000000010011 1010 0000 0001 0111
  20 000000010100 0000 0000 0000 0011
  21 000000010101 1110 0000 0000 0010
  22 000000010110 0000 0000 0000 0001
  23 000000010111 1111 1111 1111 1011
  24 000000011000 0000 0000 0000 1000
  25 000000011001 0000 0000 0000 1101
  26 000000011010 1111 0000 0000 0000
  27 000000011011 0000 0000 0010 1000
  28 000000011100 1100 1100 1100 1100
  29 000000011101 1100 1100 1100 1100
  30 000000011110 1100 1100 1100 1100
  31 000000011111 1100 1100 1100 1100
  32 000000100000 1100 1100 1100 1100
  33 000000100001 1100 1100 1100 1100
  34 000000100010 1100 1100 1100 1100
  35 000000100011 1100 1100 1100 1100
  36 000000100100 1100 1100 1100 1100
  37 000000100101 1100 1100 1100 1100
  38 000000100110 1100 1100 1100 1100
  39 000000100111 1100 1100 1100 1100
  40 000000101000 1111 0000 0000 0000
  41 000000101001 1100 1100 1100 1100
  42 000000101010 1100 1100 1100 1100
  43 000000101011 1100 1100 1100 1100
  44 000000101100 1100 1100 1100 1100
  45 000000101101 1100 1100 1100 1100
  46 000000101110 1100 1100 1100 1100
  47 000000101111 1100 1100 1100 1100
  48 000000110000 1100 1100 1100 1100
  49 000000110001 1100 1100 1100 1100
  50 000000110010 1100 1100 1100 1100
  51 000000110011 1100 1100 1100 1100
  52 000000110100 1100 1100 1100 1100
  53 000000110101 1100 1100 1100 1100
  54 000000110110 1100 1100 1100 1100
  55 000000110111 1100 1100 1100 1100

Main: Ending execution
